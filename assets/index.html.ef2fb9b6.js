import{_ as n,r,o as l,c as d,a as e,b as t,w as s,d as c,e as o}from"./app.f95394c5.js";var h="/images/OXRS-SW-Structure.jpg";const _={},u=c('<h1 id="libraries" tabindex="-1"><a class="header-anchor" href="#libraries" aria-hidden="true">#</a> Libraries</h1><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>Several libraries have been created to support the OXRS eco-system with the goal to minimise the effort in writing new firmware for OXRS compatible hardware.</p><p>The diagram below shows how the libraries relate to each other;</p><p><img src="'+h+'" alt="OXRS Libraries"></p>',5),p={id:"oxrs-sha-rack32-esp32-lib",tabindex:"-1"},b=e("a",{class:"header-anchor",href:"#oxrs-sha-rack32-esp32-lib","aria-hidden":"true"},"#",-1),f=o(),m={href:"https://github.com/SuperHouse/OXRS-SHA-Rack32-ESP32-LIB",target:"_blank",rel:"noopener noreferrer"},S=o("OXRS-SHA-RACK32-ESP32-LIB"),x=o("Helper library for firmware designed to run on the "),O=o("Rack32"),w=o(" controller"),I=e("li",null,"Handles initialisation and polling for ethernet, MQTT, API and LCD libraries",-1),R={id:"oxrs-io-iohandler-esp32-lib",tabindex:"-1"},g=e("a",{class:"header-anchor",href:"#oxrs-io-iohandler-esp32-lib","aria-hidden":"true"},"#",-1),k=o(),y=o("OXRS-IO-IOHandler-ESP32-LIB"),L=e("ul",null,[e("li",null,"Decodes inputs from various devices like switches, buttons, rotary encoders and more"),e("li",null,"Keeps track of output state and handles interlocking and timers"),e("li",null,"Typically used with MCP23017 I/O expanders")],-1),v={id:"oxrs-io-api-esp32-lib",tabindex:"-1"},P=e("a",{class:"header-anchor",href:"#oxrs-io-api-esp32-lib","aria-hidden":"true"},"#",-1),A=o(),E=o("OXRS-IO-API-ESP32-LIB"),X=e("ul",null,[e("li",null,"REST API for device configuration"),e("li",null,"OTA upload of firmware updates")],-1),T={id:"oxrs-io-mqtt-esp32-lib",tabindex:"-1"},B=e("a",{class:"header-anchor",href:"#oxrs-io-mqtt-esp32-lib","aria-hidden":"true"},"#",-1),C=o(),N=o("OXRS-IO-MQTT-ESP32-LIB"),q=e("ul",null,[e("li",null,"Maintains MQTT connection"),e("li",null,"Decodes JSON config & command payloads and passes them to your firmware for handling"),e("li",null,"Provides a simple API for publishing JSON status and telemetry data")],-1),H={id:"oxrs-io-lcd-esp32-lib",tabindex:"-1"},D=e("a",{class:"header-anchor",href:"#oxrs-io-lcd-esp32-lib","aria-hidden":"true"},"#",-1),M=o(),V=o("OXRS-IO-LCD-ESP32-LIB"),Q=e("ul",null,[e("li",null,"Common status display for OXRS compatible controller with a LCD"),e("li",null,"Animated display of the I/O port status")],-1),j={id:"oxrs-ac-sensors-esp-lib",tabindex:"-1"},J=e("a",{class:"header-anchor",href:"#oxrs-ac-sensors-esp-lib","aria-hidden":"true"},"#",-1),K=o(),W=o("OXRS-AC-SENSORS-ESP-LIB"),z=e("ul",null,[e("li",null,"Allows quick easy code intergration for devices with qwiic jst connection support"),e("li",null,"Allows the use of 5 different qwiic devices")],-1);function F(G,U){const a=r("ExternalLinkIcon"),i=r("RouterLink");return l(),d("div",null,[u,e("h3",p,[b,f,e("a",m,[S,t(a)])]),e("ul",null,[e("li",null,[x,t(i,{to:"/docs/hardware/controllers/rack32.html"},{default:s(()=>[O]),_:1}),w]),I]),e("h3",R,[g,k,t(i,{to:"/docs/libraries/esp32-io-handler-library.html"},{default:s(()=>[y]),_:1})]),L,e("h3",v,[P,A,t(i,{to:"/docs/libraries/esp32-api-library.html"},{default:s(()=>[E]),_:1})]),X,e("h3",T,[B,C,t(i,{to:"/docs/libraries/esp32-mqtt-library.html"},{default:s(()=>[N]),_:1})]),q,e("h3",H,[D,M,t(i,{to:"/docs/libraries/esp32-lcd-library.html"},{default:s(()=>[V]),_:1})]),Q,e("h3",j,[J,K,t(i,{to:"/docs/libraries/esp-sensor-library.html"},{default:s(()=>[W]),_:1})]),z])}var Z=n(_,[["render",F],["__file","index.html.vue"]]);export{Z as default};
