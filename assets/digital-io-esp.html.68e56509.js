import{_ as r,r as p,o as c,c as l,a as s,b as t,w as o,d as i,e as n}from"./app.f95394c5.js";const u={},d=i('<h1 id="digital-io-esp32-esp8266" tabindex="-1"><a class="header-anchor" href="#digital-io-esp32-esp8266" aria-hidden="true">#</a> Digital IO ESP32/ESP8266</h1><p class="maker">by <b>OXRS Core Team</b></p><blockquote><p>SKU: OXRS-IO-DigitalIO-ESP-FW</p></blockquote><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2>',4),h=n("This FW is similar to "),_=n("OXRS-SHA-StateIO-ESP32"),k=n(" which combines the functionality of "),m=n("OXRS-SHA-StateMonitor-ESP32"),b=n(" and "),f=n("OXRS-SHA-StateController-ESP32"),v=n("."),q=i('<p>The major difference of <code>DigitalIO</code> compared to <code>StateIO</code> is the usage of spare GPIO pins of an ESP32/ESP8266 to perform physical IO instead of I2C connected IO-expander.</p><p>By default all GPIOs are configured as <code>input</code>.</p><hr><h3 id="how-does-it-work" tabindex="-1"><a class="header-anchor" href="#how-does-it-work" aria-hidden="true">#</a> How does it work?</h3><p>The 16 available GPIOs on an ESP32 are;</p><p><code>2, 4, 5, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 25, 26, 27</code></p><p>The 8 available GPIOs on an ESP8266 are;</p><p><code>2, 4, 5, 12, 13, 14, 15, 16</code></p><p>Each GPIO can be individually configured to be either <code>monitor inputs</code> or <code>control outputs</code>.</p>',9),y=n("The "),g={href:"https://github.com/OXRS-IO/OXRS-IO-AdminUI-WEB-APP",target:"_blank",rel:"noopener noreferrer"},S=n("AdminUI-WEB-APP"),w=n(" is the ideal tool to set and save your desired configuration."),O=i('<div class="custom-container tip"><p class="custom-container-title">TIP</p><ul><li>Inputs are configured with <code>internal pullup</code> and are <code>LOW active</code></li><li>Outputs are <code>LOW active</code></li><li>This FW runs on <code>WiFi only</code></li></ul></div><h2 id="possible-use-cases" tabindex="-1"><a class="header-anchor" href="#possible-use-cases" aria-hidden="true">#</a> Possible use cases</h2><ul><li>Runs on an off the shelf ESP32/ESP8266 dev boards without any additional peripherals</li><li>Supports the standard OXRS eco-system so it can be used for bench testing to get familiar with the api without the need to have a RACK32 on hand</li><li>Push buttons, switches, encoder, relay driver ... can be connected for a small scale applications or testing</li></ul><h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2>',4),I=n("This FW is fully compatible with "),P={href:"https://oxrs.io",target:"_blank",rel:"noopener noreferrer"},x=n("OXRS"),E=n(" eco-system and is built using the standard OXRS "),R=n("Libraries"),T=n("All the functionality of the "),X=n("StateMonitor"),G=n(" applies to input GPIOs and "),C=n("StateController"),A=n(" functionality applies to output GPIOs. Please see their documentation for further details."),W=s("div",{class:"custom-container tip"},[s("p",{class:"custom-container-title"},"TIP"),s("p",null,[n("Instead of using the "),s("code",null,"index"),n(" to address the IO-pin, the "),s("code",null,"gpio"),n(" number is used for convenience. These numbers have to be used in all "),s("code",null,"/cmnd"),n(" requests and are returned in all "),s("code",null,"/stat"),n(" updates. Beside this change the API is equal to StateMonitor/StateController to ensure compatability with the IO-expander HW.")])],-1),L=n("The configuration payloads are wrapped in an extra JSON object, containing the GPIO pin and type. The payloads inside the "),B=s("code",null,"input",-1),D=n(" and "),H=s("code",null,"output",-1),j=n(" objects mirror the format in the "),F=n("StateMonitor"),M=n(" and "),N=n("StateController"),V=n(" firmware. The only exception is "),U=s("code",null,"interlockGpio",-1),J=n(" which is named "),K=s("code",null,"interlockIndex",-1),z=n(" in the State Controller firmware."),Q=i(`<div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;gpios&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;gpio&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;contact&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;invert&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;gpio&quot;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;input&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;input&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;button&quot;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;gpio&quot;</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;timer&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;timerSeconds&quot;</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;gpio&quot;</span><span class="token operator">:</span> <span class="token number">21</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;interlockGpio&quot;</span><span class="token operator">:</span> <span class="token number">22</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      <span class="token property">&quot;gpio&quot;</span><span class="token operator">:</span> <span class="token number">22</span><span class="token punctuation">,</span>
      <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;output&quot;</span><span class="token punctuation">,</span>
      <span class="token property">&quot;output&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;motor&quot;</span><span class="token punctuation">,</span> <span class="token property">&quot;interlockGpio&quot;</span><span class="token operator">:</span> <span class="token number">21</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="downloads" tabindex="-1"><a class="header-anchor" href="#downloads" aria-hidden="true">#</a> Downloads</h2>`,2),Y=n("Download the "),Z={href:"https://github.com/OXRS-IO/OXRS-IO-DigitalIO-ESP-FW/releases",target:"_blank",rel:"noopener noreferrer"},$=n("latest binary"),nn=n(" of the firmware from GitHub."),sn=n("Download the "),tn={href:"https://github.com/OXRS-IO/OXRS-IO-DigitalIO-ESP-FW",target:"_blank",rel:"noopener noreferrer"},en=n("source code"),on=n(" of the firmware from GitHub."),an=s("h2",{id:"supported-hardware",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#supported-hardware","aria-hidden":"true"},"#"),n(" Supported Hardware")],-1),pn=s("p",null,"Any ESP32 or ESP8266 with all GPIOs broken out and not connected to or used by additional hardware.",-1),rn=n("Is designed to run as part of the "),cn={href:"https://oxrs.io",target:"_blank",rel:"noopener noreferrer"},ln=n("OXRS"),un=n(" eco-system."),dn=s("hr",null,null,-1),hn=s("h4",{id:"credits",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#credits","aria-hidden":"true"},"#"),n(" Credits")],-1),_n=n("Ben Jones "),kn={href:"https://github.com/sumnerboy12",target:"_blank",rel:"noopener noreferrer"},mn=n("https://github.com/sumnerboy12"),bn=n("Moin "),fn={href:"https://github.com/moinmoin-sh",target:"_blank",rel:"noopener noreferrer"},vn=n("https://github.com/moinmoin-sh"),qn=s("hr",null,null,-1),yn=s("h4",{id:"license",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#license","aria-hidden":"true"},"#"),n(" License")],-1),gn=s("p",null,[n("Copyright 2020-present SuperHouse Automation Pty Ltd "),s("a",{href:"www.superhouse.tv"},"www.superhouse.tv")],-1),Sn=s("p",null,'The software portion of this project is licensed under the Simplified BSD License. The "licence" folder within this project contains a copy of this license in plain text format.',-1);function wn(On,In){const e=p("RouterLink"),a=p("ExternalLinkIcon");return c(),l("div",null,[d,s("p",null,[h,t(e,{to:"/docs/firmware/state-io-esp32.html"},{default:o(()=>[_]),_:1}),k,t(e,{to:"/docs/firmware/state-monitor-esp32.html"},{default:o(()=>[m]),_:1}),b,t(e,{to:"/docs/firmware/state-controller-esp32.html"},{default:o(()=>[f]),_:1}),v]),q,s("p",null,[y,s("a",g,[S,t(a)]),w]),O,s("p",null,[I,s("a",P,[x,t(a)]),E,t(e,{to:"/docs/libraries/"},{default:o(()=>[R]),_:1})]),s("p",null,[T,t(e,{to:"/docs/firmware/state-monitor-esp32.html"},{default:o(()=>[X]),_:1}),G,t(e,{to:"/docs/firmware/state-controller-esp32.html"},{default:o(()=>[C]),_:1}),A]),W,s("p",null,[L,B,D,H,j,t(e,{to:"/docs/firmware/state-monitor-esp32.html"},{default:o(()=>[F]),_:1}),M,t(e,{to:"/docs/firmware/state-controller-esp32.html"},{default:o(()=>[N]),_:1}),V,U,J,K,z]),Q,s("p",null,[Y,s("a",Z,[$,t(a)]),nn]),s("p",null,[sn,s("a",tn,[en,t(a)]),on]),an,pn,s("p",null,[rn,s("a",cn,[ln,t(a)]),un]),dn,hn,s("ul",null,[s("li",null,[_n,s("a",kn,[mn,t(a)])]),s("li",null,[bn,s("a",fn,[vn,t(a)])])]),qn,yn,gn,Sn])}var xn=r(u,[["render",wn],["__file","digital-io-esp.html.vue"]]);export{xn as default};
