import{_ as e,o as a,c as r,d as n}from"./app.f95394c5.js";const t={},o=n('<h1 id="hardware-software-versioning-guide" tabindex="-1"><a class="header-anchor" href="#hardware-software-versioning-guide" aria-hidden="true">#</a> Hardware / Software Versioning Guide</h1><p>Includes: Information on how version codes are created / changed between updates</p><p>All versioning will follow the standard versioning design of <strong>MAJOR</strong>.<strong>MINOR</strong>.<strong>PATCH</strong>-<strong>TAG</strong></p><h3 id="major" tabindex="-1"><a class="header-anchor" href="#major" aria-hidden="true">#</a> MAJOR</h3><p>version when you make incompatible API changes.</p><h3 id="minor" tabindex="-1"><a class="header-anchor" href="#minor" aria-hidden="true">#</a> MINOR</h3><p>version when you add functionality in a backwards compatible manner.</p><h3 id="tag" tabindex="-1"><a class="header-anchor" href="#tag" aria-hidden="true">#</a> TAG</h3><p>Denotes features/pre-production builds available for use, but not actually production ready.</p><h2 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h2><h3 id="_0-0-1" tabindex="-1"><a class="header-anchor" href="#_0-0-1" aria-hidden="true">#</a> 0.0.1</h3><p>This is the very first iteration of something.<br> Next changes that are just bug fixes are 0.0.2 followed by 0.0.3 etc...</p><h3 id="_0-1-0" tabindex="-1"><a class="header-anchor" href="#_0-1-0" aria-hidden="true">#</a> 0.1.0</h3><p><em>When below version 1.0.0, the minor acts as a breaking change notification</em><br> So you&#39;ve made breaking changes where 0.0.X won&#39;t match/align/work with everything from this version.</p><h3 id="_1-0-0" tabindex="-1"><a class="header-anchor" href="#_1-0-0" aria-hidden="true">#</a> 1.0.0</h3><p>This is the first major version denoting something is now production ready.</p><h3 id="_1-0-1" tabindex="-1"><a class="header-anchor" href="#_1-0-1" aria-hidden="true">#</a> 1.0.1</h3><p>You&#39;ve made some bugfixes and small changes that do not affect or break the existing application/integrations/flow</p><h3 id="_1-1-0-mynewfeature" tabindex="-1"><a class="header-anchor" href="#_1-1-0-mynewfeature" aria-hidden="true">#</a> 1.1.0-mynewfeature</h3><p>This is a development build for mynewfeature that is accessable and contains breaking changes.<br> This would be used for end-users to deploy your software/tool for testing before you release 1.1.0 to production.</p><h3 id="_1-1-0" tabindex="-1"><a class="header-anchor" href="#_1-1-0" aria-hidden="true">#</a> 1.1.0</h3><p>You&#39;ve now released your breaking change/feature update for mynewfeature into production meaning people can start using it, and it won&#39;t cause any major issues with other users of v1.0.X<br> There are a few changes, but nothing that exists on 1.0.X would break.</p><h3 id="_2-0-0-restructure" tabindex="-1"><a class="header-anchor" href="#_2-0-0-restructure" aria-hidden="true">#</a> 2.0.0-restructure</h3><p>You&#39;ve done a bunch of work, optimising things or making other changes and no tool/software that uses 1.X.X would work with your new version.<br> This is a tag so end users can start work testing your new changes.<br> note: bugfixes with a feature would increment the patch until you&#39;re ready.<br><em>eg: 2.0.1-restructure or 2.0.2-restructure</em></p><h3 id="_2-0-0" tabindex="-1"><a class="header-anchor" href="#_2-0-0" aria-hidden="true">#</a> 2.0.0</h3><p>You&#39;ve just released version 2 of your tool, v1.X.X users cannot just switch over from v1 to v2.</p>',26),i=[o];function s(h,d){return a(),r("div",null,i)}var c=e(t,[["render",s],["__file","versioning.html.vue"]]);export{c as default};
